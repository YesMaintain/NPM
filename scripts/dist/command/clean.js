import{Octokit as c}from"@octokit/core";import s from"../lib/env.js";const i=async()=>{const r=s.GITHUB_USER,t=[],a=[],n=new c({auth:s.GITHUB_AUTH_TOKEN});for(const o of(await n.request(`GET /users/${r}/repos`)).data)a.push({owner:r,name:o.name});for(const o of(await n.request(`GET /users/${r}/orgs`)).data){t.push({name:o.login});for(const e of(await n.request(`GET /orgs/${o.login}/repos`)).data)a.push({owner:o.login,name:e.name})}for(const o of a){try{for(const e of(await n.request(`GET /repos/${o.owner}/${o.name}/actions/caches`,{owner:o.owner,repo:o.name})).data.actions_caches)try{await n.request(`DELETE /repos/${o.owner}/${o.name}/actions/caches/${e.id}`,{owner:o.owner,repo:o.name,cache_id:e.id}),console.log(`Deleted actions/caches/${e.id} for: ${o.name}`)}catch{console.log(`Could not delete actions/caches/${e.id} for: ${o.name}`)}}catch{console.log(`Could not delete actions/caches for: ${o.name}`)}try{for(const e of(await n.request(`GET /repos/${o.owner}/${o.name}/actions/runs`,{owner:o.owner,repo:o.name})).data.workflow_runs){try{await n.request(`DELETE /repos/${o.owner}/${o.name}/actions/runs/${e.id}`,{owner:o.owner,repo:o.name,run_id:e.id}),console.log(`Deleted actions/runs/${e.id} for: ${o.name}`)}catch{console.log(`Could not delete actions/runs/${e.id} for: ${o.name}`)}try{await n.request(`DELETE /repos/${o.owner}/${o.name}/actions/runs/${e.id}/logs`,{owner:o.owner,repo:o.name,run_id:e.id}),console.log(`Deleted actions/runs/${e.id}/logs for: ${o.name}`)}catch{console.log(`Could not delete actions/runs/${e.id}/logs for: ${o.name}`)}}}catch{console.log(`Could not delete actions/runs and logs for: ${o.name}`)}}};var $=i;export{$ as default};
