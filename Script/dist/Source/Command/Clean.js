import f from"../Library/Environment.js";import e from"../Library/Request.js";const t=f.GITHUB_USER,i={Organizations:[],Repositories:[]};var O=async(p=[])=>{const c=await e(`GET /users/${t}/repos`);if(c)for(const o of c.data)i.Repositories.push({Owner:t,Name:o.name});const w=await e(`GET /users/${t}/orgs`);if(w)for(const o of w.data){i.Organizations.push({Name:o.login});const s=await e(`GET /orgs/${o.login}/repos`);if(s)for(const n of s.data)i.Repositories.push({Owner:o.login,Name:n.name})}let a=null;for(const o of i.Repositories){for(const s of p)o.Name===s?a=!0:a=!1;if(a===null||a){const s=await e(`GET /repos/${o.Owner}/${o.Name}/actions/runs`,{owner:o.Owner,repo:o.Name});if(s?.data?.workflow_runs)for(const r of s.data.workflow_runs)await e(`DELETE /repos/${o.Owner}/${o.Name}/actions/runs/${r.id}`,{owner:o.Owner,repo:o.Name,run_id:r.id}),await e(`DELETE /repos/${o.Owner}/${o.Name}/actions/runs/${r.id}/logs`,{owner:o.Owner,repo:o.Name,run_id:r.id});const n=await e(`GET /repos/${o.Owner}/${o.Name}/actions/caches`,{owner:o.Owner,repo:o.Name});if(n?.data?.actions_caches)for(const r of n.data.actions_caches)await e(`DELETE /repos/${o.Owner}/${o.Name}/actions/caches/${r.id}`,{owner:o.Owner,repo:o.Name,cache_id:r.id})}}};export{O as default};
