import{constants as p}from"fs";import{access as w,mkdir as $,readFile as d,rm as g,writeFile as u}from"fs/promises";import{dirname as y}from"path";import k from"toml";import C from"../Library/Directory.js";import h from"../Library/Package.js";import F from"../Library/Type.js";import D from"../Option/Cloudflare.js";const v=async s=>{for(const{Path:o,Name:r,File:n}of s)for(const[i,f]of await C(await h("Cloudflare"))){const t=`${i}/.github`,l=await n();if(o==="/workflows/"&&r==="Cloudflare.yml")for(const e of f){const O=y(e).replace(i,""),m=(await d(e,"utf-8")).toString(),c=(await F()).get(e.split("/").pop());if(typeof c<"u"&&c==="Cloudflare")try{const a=k.parse(m);console.log(a)}catch(a){console.log(e),console.log(a)}}if(l.size>1){try{await $(`${t}${o}`,{recursive:!0})}catch{console.log(`Could not create: ${t}${o}`)}try{await u(`${t}${o}${r}`,`${[...l].join("")}`)}catch{console.log(`Could not create workflow for: ${t}/workflows/Cloudflare.yml`)}}else try{await w(`${t}${o}${r}`,p.F_OK);try{await g(`${t}${o}${r}`)}catch{console.log(`Could not remove ${o}${r} for: ${t}`)}}catch{}}};var E=async()=>await v(D);export{E as default};
