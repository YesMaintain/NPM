import{Octokit as f}from"@octokit/core";import a from"../lib/env.js";const w=async(i=[])=>{const t=a.GITHUB_USER,c=[],n=[],s=new f({auth:a.GITHUB_AUTH_TOKEN});for(const o of(await s.request(`GET /users/${t}/repos`)).data)n.push({owner:t,name:o.name});for(const o of(await s.request(`GET /users/${t}/orgs`)).data){c.push({name:o.login});for(const e of(await s.request(`GET /orgs/${o.login}/repos`)).data)n.push({owner:o.login,name:e.name})}let r;for(const o of n){for(const e of i)o.name===e?r=!0:r=!1;if(typeof r>"u"||r)try{for(const e of(await s.request(`GET /repos/${o.owner}/${o.name}/actions/workflows`,{owner:o.owner,repo:o.name})).data.workflows)try{await s.request(`POST /repos/${o.owner}/${o.name}/actions/workflows/${e.id}/dispatches`,{ref:"main"}),console.log(`Dispatched actions/workflows/${e.id} for: ${o.name}`)}catch{console.log(`Could not dispatch actions/workflows/${e.id} for: ${o.name}`)}}catch{console.log(`Could not dispatch actions/workflows and logs for: ${o.name}`)}}};var m=w;export{m as default};
